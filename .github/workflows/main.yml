name: Build

on:
  push:
    branches:
      - '**'
  release:
    types: [ created ]

jobs:
  windows-64bit:
    runs-on: windows-2019
    steps:
    - uses: actions/checkout@v1
      with:
        fetch-depth: 1
    - name: Install signing key
      run: |
        echo "${{ secrets.CERT_WINDOWS_STANDALONE }}" > Certificate.b64
        base64 -d Certificate.b64 > Certificate.pfx
        cp Certificate.pfx dist/windows
      shell: bash
    - name: Set version
      if: github.event_name == 'release'
      shell: bash
      run: |
        TAG_NAME=$(./dist/get-tag-name.sh)
        echo "Setting version to ${TAG_NAME/v/}"
        bash dist/windows/scripts/set_version.sh "${TAG_NAME/v/}"
    - name: Cache POCO bin64
      id: cache-poco-bin64
      uses: actions/cache@v1
      with:
        path: third_party/poco/bin64
        key: ${{ runner.os }}-poco-bin64-1.9.0
    - name: Cache POCO lib64
      id: cache-poco-lib64
      uses: actions/cache@v1
      with:
        path: third_party/poco/lib64
        key: ${{ runner.os }}-poco-lib64-1.9.0
    - name: Clean
      shell: cmd
      run: dotnet nuget locals all --clear
    - name: Build on Windows x64 without POCO
      if: steps.cache-poco-bin64.outputs.cache-hit == 'true'
      shell: cmd
      run: |
        "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\MSBuild\Current\Bin\MSBuild.exe" /p:Configuration=Release /p:Platform="x64" /t:Clean,Build /restore /m src\ui\windows\TogglDesktop\TogglDesktop.NoPoco.sln
    - name: Build on Windows x64
      if: steps.cache-poco-bin64.outputs.cache-hit != 'true'
      shell: cmd
      run: |
        "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\MSBuild\Current\Bin\MSBuild.exe" /p:Configuration=Release /p:Platform="x64" /t:Clean,Build /restore /m src\ui\windows\TogglDesktop\TogglDesktop.sln
    - name: Sign binaries
      if: github.event_name == 'release'
      run: |
        ./dist/windows/scripts/sign.sh cert_password=${{ secrets.CERT_WINDOWS_PASSWORD }}
      shell: bash
    - name: Make x64 installer
      if: github.event_name == 'release'
      run: |
        cd dist/windows
        makensis /DCERT_PASSWORD=${{ secrets.CERT_WINDOWS_PASSWORD }} TogglDesktopInstaller-x64.nsi
    - name: Sign the installer
      if: github.event_name == 'release'
      shell: cmd
      run: |
        "C:\Program Files (x86)\Windows Kits\10\bin\10.0.18362.0\x64\signtool.exe" sign -fd SHA256 -a -t http://timestamp.digicert.com -f Certificate.pfx -p "${{ secrets.CERT_WINDOWS_PASSWORD }}" dist\windows\TogglDesktopInstaller-x64.exe
    - name: Prepare artifact files (raw release)
      if: github.event_name != 'release'
      run: |
        cd dist/windows
        mkdir toggldesktop_windows_release_x86_64
        cd toggldesktop_windows_release_x86_64
        cp ../../../third_party/vs_redist/x64/*.dll .
        cp ../../../src/ui/windows/TogglDesktop/TogglDesktop/bin/x64/Release/*.dll .
        cp ../../../src/ui/windows/TogglDesktop/TogglDesktop/bin/x64/Release/*.exe .
        cp ../../../src/ui/windows/TogglDesktop/TogglDesktop/bin/x64/Release/cacert.pem .
        cp ../../../src/ui/windows/TogglDesktop/TogglDesktop/bin/x64/Release/TogglDesktop.exe.config .
        cp ../../../src/ui/windows/TogglDesktop/TogglDesktop/Resources/toggl.ico .
      shell: bash
    - name: Upload artifacts to GitHub (raw release)
      if: github.event_name != 'release'
      uses: actions/upload-artifact@v2
      with:
        name: toggldesktop_windows_release_x86_64
        path: dist/windows/toggldesktop_windows_release_x86_64
    - name: Upload to GitHub
      if: github.event_name == 'release'
      run: |
        TAG_NAME=$(./dist/get-tag-name.sh)
        ./dist/upload-github-release-asset.sh github_api_token=${{ secrets.GITHUB_TOKEN }} tag="$TAG_NAME" filename="dist/windows/TogglDesktopInstaller-x64.exe" renameto="TogglDesktopInstaller-x64-${TAG_NAME/v/}.exe"
      shell: bash

  windows-dev-release:
    needs: [windows-64bit]
    runs-on: ubuntu-latest # anything supporting bash
    if: github.event_name == 'release'
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 1
    - name: Add new dev channel release
      shell: bash
      run: |
        TAG_NAME=$(./dist/get-tag-name.sh)
        ./dist/update_releases.sh win dev ${TAG_NAME/v/}
    
  windows-store:
    runs-on: windows-2019
    if: github.event_name == 'release'
    steps:
    - uses: actions/checkout@v1
      with:
        fetch-depth: 1
    - name: Install signing key - Part 1
      run: |
        echo "${{ secrets.CERT_WINDOWS_STORE_V2 }}" > Certificate.b64
        base64 -d Certificate.b64 > Certificate.pfx
      shell: bash
    - name: Install signing key - Part 2
      run: |
        $SecurePassword = "1" | ConvertTo-SecureString -AsPlainText -Force
        Import-PfxCertificate -FilePath Certificate.pfx cert:\currentUser\My -Password $SecurePassword
      shell: powershell
    - name: Set version
      shell: bash
      run: |
        TAG_NAME=$(./dist/get-tag-name.sh)
        echo "Setting version to ${TAG_NAME/v/}"
        bash dist/windows/scripts/set_version.sh "${TAG_NAME/v/}"
    - name: Build on Windows for Microsoft Store
      shell: cmd
      run: |
        "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\MSBuild\Current\Bin\MSBuild.exe" /p:Configuration=StoreRelease /p:Platform="x86" /p:AppxPackageSigningEnabled=false /t:Clean,Build /restore -m src\ui\windows\TogglDesktop\TogglDesktop.sln
        "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\MSBuild\Current\Bin\MSBuild.exe" /p:Configuration=StoreRelease /p:Platform="x64" /p:UapAppxPackageBuildMode=CI /p:AppxBundle=Always /p:AppxBundlePlatforms="x86|x64" /p:AppxPackageSigningEnabled=true /p:PackageCertificateThumbprint="2AFAD2683749B3194CB0CB1D720900DC51AB90FE" /p:AppxPackageDir="..\\..\\..\\..\\..\\" /t:Clean,Build /restore -m src\ui\windows\TogglDesktop\TogglDesktop.sln
        dir
    - name: Upload to GitHub
      run: |
        TAG_NAME=$(./dist/get-tag-name.sh)
        ./dist/upload-github-release-asset.sh github_api_token=${{ secrets.GITHUB_TOKEN }} tag="$TAG_NAME" filename="TogglDesktop.Package_${TAG_NAME/v/}.0_x86_x64_bundle_StoreRelease.appxupload"
      shell: bash
